<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JobSwipe - Talent Browser</title>
    <style>
        html {
            background: linear-gradient(135deg, #ffefd5 0%, #ffb84d 100%);
        }
        
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #ffefd5 0%, #ffb84d 100%);
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .app-container {
            width: 350px;
            text-align: center;
            position: relative;
        }

        header {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }

        .logo {
            width: 50px;
            height: 50px;
            margin-right: 10px;
        }

        h1 {
            font-size: 24px;
            font-weight: 700;
            color: #333;
        }

        .candidate-card-container {
            position: relative;
            width: 100%;
            height: 500px;
            perspective: 1000px;
        }

        .candidate-card {
            width: 100%;
            height: 100%;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.2);
            position: absolute;
            transition: transform 0.3s ease-in-out;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .profile-image {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin: 0 auto;
            object-fit: cover;
            border: 3px solid #ffb84d;
        }

        .candidate-name {
            font-size: 24px;
            font-weight: 500;
            color: #333;
        }

        .candidate-title {
            font-size: 18px;
            color: #666;
        }

        .candidate-details {
            display: flex;
            flex-direction: column;
            gap: 8px;
            text-align: left;
            margin-top: 10px;
        }

        .detail-item {
            background-color: #f8f9fa;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
        }

        .detail-label {
            color: #666;
            font-weight: 500;
        }

        .action-buttons {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            padding: 10px;
        }

        .swipe-btn {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            transition: transform 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
        }

        .reject-btn {
            background-color: #dc3545;
        }

        .accept-btn {
            background-color: #28a745;
        }

        .swipe-btn:hover {
            transform: scale(1.1);
        }

        .swipe-btn:active {
            transform: scale(0.9);
        }

        .end-message {
            text-align: center;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .error {
            color: #dc3545;
            padding: 20px;
            text-align: center;
        }

        #refresh-btn {
            background-color: #ffb84d;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            color: white;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s;
        }

        #refresh-btn:hover {
            background-color: #ffa726;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <header>
            <img src="images/logo.png" alt="JobSwipe Logo" class="logo"> <!-- Updated logo source -->
            <h1>JobSwipe</h1>
        </header>
        
        <div id="candidate-card-container" class="candidate-card-container">
            <!-- Cards will be inserted here dynamically -->
            <div class="loading">Loading candidates...</div>
        </div>
        
        <div class="action-buttons">
            <button id="reject-btn" class="swipe-btn reject-btn">✕</button>
            <button id="accept-btn" class="swipe-btn accept-btn">✓</button>
        </div>
    </div>

    <script>
        class CandidateSwiper {
            constructor() {
                this.container = document.getElementById('candidate-card-container');
                this.rejectBtn = document.getElementById('reject-btn');
                this.acceptBtn = document.getElementById('accept-btn');
                this.candidates = [];
                this.currentIndex = 0;

                this.bindEvents();
                this.fetchCandidates();
            }

            async fetchCandidates() {
                try {
                    const response = await fetch('https://dummyjson.com/users');
                    if (!response.ok) throw new Error('Failed to fetch candidates');
                    
                    const data = await response.json();
                    this.candidates = data.users;
                    
                    if (this.candidates.length > 0) {
                        this.renderCard(this.candidates[0]);
                    } else {
                        this.showEndMessage();
                    }
                } catch (error) {
                    this.showError(error.message);
                }
            }

            renderCard(candidate) {
                const card = document.createElement('div');
                card.className = 'candidate-card';
                card.id = 'current-card';
                
                card.innerHTML = `
                    <img src="${candidate.image}" alt="${candidate.firstName}" class="profile-image">
                    <div class="candidate-name">${candidate.firstName} ${candidate.lastName}</div>
                    <div class="candidate-title">${candidate.company.title}</div>
                    <div class="candidate-details">
                        <div class="detail-item">
                            <span class="detail-label">Email:</span> ${candidate.email}
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Location:</span> ${candidate.address.city}, ${candidate.address.state}
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Department:</span> ${candidate.company.department}
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">University:</span> ${candidate.university}
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Skills:</span> ${candidate.company.department} Expert
                        </div>
                    </div>
                `;

                this.container.innerHTML = '';
                this.container.appendChild(card);
            }

            showEndMessage() {
                this.container.innerHTML = `
                    <div class="end-message">
                        <h2>No more candidates</h2>
                        <p>You've reviewed all available candidates.</p>
                        <button id="refresh-btn" onclick="location.reload()">Start Over</button>
                    </div>
                `;
            }

            showError(message) {
                this.container.innerHTML = `
                    <div class="error">
                        <p>Error: ${message}</p>
                        <button id="refresh-btn" onclick="location.reload()">Try Again</button>
                    </div>
                `;
            }

            bindEvents() {
                this.rejectBtn.addEventListener('click', () => this.handleSwipe('left'));
                this.acceptBtn.addEventListener('click', () => this.handleSwipe('right'));
            }

            handleSwipe(direction) {
                const card = document.getElementById('current-card');
                if (!card) return;

                const transform = direction === 'left' ? -1000 : 1000;
                card.style.transform = `translateX(${transform}px)`; // corrected syntax

                setTimeout(() => {
                    this.currentIndex++;
                    if (this.currentIndex < this.candidates.length) {
                        this.renderCard(this.candidates[this.currentIndex]);
                    } else {
                        this.showEndMessage();
                    }
                }, 300);
            }
        }

        // Initialize the app when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new CandidateSwiper();
        });
    </script>
</body>

</html>