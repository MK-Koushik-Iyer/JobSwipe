<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sign Up Form</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <style>
      body { display: flex; justify-content: center; align-items: center;
      height: 100vh; font-family: 'Poppins', sans-serif; background:
      linear-gradient(135deg, #ffefd5 0%, #ffb84d 100%); margin: 0; transition:
      background 0.5s; overflow-y: auto; } .card { background-color: white;
      border-radius: 20px; box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      max-width: 400px; width: 100%; padding: 20px; box-sizing: border-box;
      text-align: center; transition: background 0.5s, color 0.5s; }
      .card-header { margin-top: 20px; margin-bottom: 20px; /* Increased margin
      to add space above the title */ } .card-title { font-size: 24px;
      font-weight: bold; margin-bottom: 10px; } .grid { display: grid; gap:
      12px; } .input-group { display: flex; flex-direction: column; } label {
      margin-bottom: 6px; font-size: 14px; font-weight: 500; text-align: left; }
      input { padding: 8px; border: 1px solid #ccc; border-radius: 20px;
      font-size: 14px; outline: none; transition: border-color 0.3s; width:
      calc(100% - 16px); box-sizing: border-box; } input:focus { border-color:
      #ff9933; } .button { display: block; width: 100%; padding: 10px;
      background: linear-gradient(90deg, #ffa500, #ff4500); color: white;
      border: none; border-radius: 25px; font-size: 16px; cursor: pointer;
      text-align: center; transition: background 0.3s; } .button:hover {
      background: linear-gradient(90deg, #ff8c00, #ff6347); } .separator {
      display: flex; align-items: center; text-align: center; margin: 15px 0; }
      .separator::before, .separator::after { content: ''; flex: 1;
      border-bottom: 1px solid #ccc; } .separator::before { margin-right: .25em;
      } .separator::after { margin-left: .25em; } .social-login { display: flex;
      justify-content: space-around; margin-top: 15px; } .social-login a {
      font-size: 24px; /* Increased font size for larger icons */ color:
      #ff4500; text-decoration: none; transition: transform 0.3s; }
      .social-login a:hover { transform: scale(1.1); } .text-center {
      text-align: center; } .theme-toggle { position: absolute; top: 20px;
      right: 20px; cursor: pointer; font-size: 24px; color: #ff4500; } body.dark
      { background: #121212; } body.dark .card { background-color: #1f1f1f;
      color: #f5f5f5; } body.dark input { background-color: #333; color:
      #f5f5f5; border: 1px solid #444; } body.dark .button { background:
      linear-gradient(90deg, #ff8c00, #ff6347); } body.dark .separator::before,
      body.dark .separator::after { border-bottom: 1px solid #444; } /* Role
      toggle styles */ .role-toggle { display: flex; position: relative; width:
      100%; border-radius: 25px; background-color: #f0f0f0; border: 2px solid
      #ff4500; /* Overall border effect */ overflow: hidden; } .role-toggle
      .toggle-btn { flex: 1; padding: 10px; border: none; /* Remove individual
      borders from buttons */ border-radius: 25px; font-size: 14px; cursor:
      pointer; background-color: transparent; color: #ff4500; transition: color
      0.3s, background-color 0.3s; position: relative; z-index: 1; text-align:
      center; } .role-toggle .toggle-btn.active { color: white;
      background-color: #ff4500; border: 2px solid #ff4500; /* Border for the
      active button */ } .toggle-slider { position: absolute; top: 0; bottom: 0;
      width: 50%; background-color: #ff4500; border-radius: 25px; transition:
      transform 0.3s ease; z-index: 0; } .role-toggle
      .toggle-btn:first-child.active ~ .toggle-slider { transform:
      translateX(0); } .role-toggle .toggle-btn:last-child.active ~
      .toggle-slider { transform: translateX(100%); } /* Dark mode styles for
      role toggle */ body.dark .role-toggle { background-color: #333;
      border-color: #ff4500; } body.dark .toggle-slider { background-color:
      #ff4500; } body.dark .role-toggle .toggle-btn { color: #f5f5f5; }
      body.dark .role-toggle .toggle-btn.active { color: #121212; border-color:
      #ff4500; } /* Adjust layout for input fields */ .input-row { display:
      flex; gap: 12px; } .input-group { flex: 1; } /* Link styling */ .link {
      color: #ff4500; text-decoration: none; margin-top: 10px; display:
      inline-block; } .link:hover { text-decoration: underline; }
    </style>
  </head>
  <body>
    <div class="theme-toggle" id="themeToggle"><i class="fas fa-moon"></i></div>
    <div class="card">
      <div class="role-toggle">
        <button id="jobSeekerBtn" class="toggle-btn active">Job Seeker</button>
        <button id="hirerBtn" class="toggle-btn">Hirer</button>
        <div class="toggle-slider"></div>
      </div>
      <div class="card-header">
        <div class="card-title" id="cardTitle">SignUp to JobSwipe</div>
      </div>
      <form action="/signup" method="post" id="signupForm">
        <div class="card-content">
          <input type="hidden" id="role" name="role" value="hirer" />
          <div class="grid gap-4">
            <div class="input-row">
              <div class="input-group">
                <label for="fname">First name</label>
                <input id="fname" name="fname" type="text" placeholder="Max" required />
              </div>
              <div class="input-group">
                <label for="lname">Last name</label>
                <input id="lname" name="lname" type="text" placeholder="Robinson" required />
              </div>
            </div>
            <div class="input-group">
              <label for="email">Email</label>
              <input id="email" name="email" type="email" placeholder="m@example.com" required />
            </div>
            <div class="input-group">
              <label for="password">Password</label>
              <input id="password" name="password" type="password" required />
            </div>
            <button type="submit" class="button">Create an account</button>
          </div>
          <div class="separator">or</div>
          <div class="social-login">
            <a href="#"><i class="fab fa-google"></i></a>
            <a href="#"><i class="fab fa-linkedin"></i></a>
            <a href="#"><i class="fab fa-facebook"></i></a>
            <a href="#"><i class="fas fa-phone"></i></a>
          </div>
          <div class="mt-4 text-center text-sm">
            Already have an account?
            <a href="http://localhost:8080/loginpage" class="link">Login</a>
          </div>
        </div>
      </form>
    </div>

<script>
// Get DOM elements
const themeToggle = document.getElementById('themeToggle');
const jobSeekerBtn = document.getElementById('jobSeekerBtn');
const hirerBtn = document.getElementById('hirerBtn');
const cardTitle = document.getElementById('cardTitle');
const roleInput = document.getElementById('role');
const toggleSlider = document.querySelector('.toggle-slider');
const signupForm = document.getElementById('signupForm');
const body = document.body;

// Theme Toggle Functionality
function initializeTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        body.classList.add('dark');
        themeToggle.querySelector('i').classList.remove('fa-moon');
        themeToggle.querySelector('i').classList.add('fa-sun');
    }
}

function toggleTheme() {
    body.classList.toggle('dark');
    const icon = themeToggle.querySelector('i');
    if (body.classList.contains('dark')) {
        icon.classList.replace('fa-moon', 'fa-sun');
    } else {
        icon.classList.replace('fa-sun', 'fa-moon');
    }
    localStorage.setItem('theme', body.classList.contains('dark') ? 'dark' : 'light');
}

// Role Toggle Functionality
function toggleRole(role) {
    if (role === 'seeker') {
        jobSeekerBtn.classList.add('active');
        hirerBtn.classList.remove('active');
        roleInput.value = 'seeker';
        toggleSlider.style.transform = 'translateX(0)';
    } else {
        hirerBtn.classList.add('active');
        jobSeekerBtn.classList.remove('active');
        roleInput.value = 'hirer';
        toggleSlider.style.transform = 'translateX(100%)';
    }
}

// Form submission handling
signupForm.addEventListener('submit', function(e) {
    e.preventDefault(); // Prevent default form submission

    // Determine redirect page based on role
    const role = roleInput.value;
    const redirectUrl = role === 'seeker' ? '/profilesetupseeker' : '/signuphirer';

    // Redirect after signup processing
    fetch('/signup', {
        method: 'POST',
        body: new FormData(signupForm),
    })
    .then(response => {
        if (response.ok) {
            window.location.href = redirectUrl;
        } else {
            alert('Signup failed. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred. Please try again.');
    });
});

// Event Listeners
document.addEventListener('DOMContentLoaded', initializeTheme);
themeToggle.addEventListener('click', toggleTheme);
jobSeekerBtn.addEventListener('click', () => toggleRole('seeker'));
hirerBtn.addEventListener('click', () => toggleRole('hirer'));
</script>

  </body>
</html>